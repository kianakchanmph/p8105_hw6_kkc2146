---
title: "Homework6" 
Name: "Kiana Chan"
Date: "12/4/21"
output: github_document
---


```{r setup, include = FALSE}
library(tidyverse)
library(modelr)
library(mgcv)
library(rvest) 
library(broom)

knitr::opts_chunk$set(
  fig.width = 6,
  fig.asp = .6,
  out.width = "90%"
)

theme_set(theme_minimal() + theme(legend.position = "bottom"))

options(
  ggplot2.continuous.colour = "viridis",
  ggplot2.continuous.fill = "viridis"
)

scale_colour_discrete = scale_colour_viridis_d
scale_fill_discrete = scale_fill_viridis_d
```

## Problem 1 
In this problem, you will analyze data gathered to understand the effects of several variables on a child’s birthweight. This dataset, available here, consists of roughly 4000 children and includes the following variables:

```{r}
birthweight_data = read_csv("./birthweight.csv") %>% 
janitor::clean_names()
```

Convert numeric variables to factor variables. 

```{r}
birthweight_data = birthweight_data %>% 
  mutate(
    babysex = case_when(
      babysex == 1 ~ "male", 
      babysex == 2 ~ "female"),
    frace = case_when(
      frace == 1 ~ "white", 
      frace == 2 ~ "black", 
      frace == 3 ~ "asian", 
      frace == 4 ~ "puerto rican", 
      frace == 8 ~ "other", 
      frace == 9 ~ "unknown"), 
    malform = case_when(
      malform == 0 ~ "absent", 
      malform == 1 ~ "present"),
    mrace = case_when(
      mrace == 1 ~ "white", 
      mrace == 2 ~ "black", 
      mrace == 3 ~ "asian", 
      mrace == 4 ~ "puerto rican", 
      mrace == 8 ~ "other")) %>%
  
mutate(
  babysex = as.factor(babysex), 
  frace = as.factor(frace), 
  malform = as.factor(malform), 
  mrace = as.factor(mrace))
```

Propose a regression model for birthweight. This model may be based on a hypothesized structure for the factors that underly birthweight, on a data-driven model-building process, or a combination of the two. Describe your modeling process and show a plot of model residuals against fitted values – use add_predictions and add_residuals in making this plot.

Model 1 
```{r}
birthweight_mod1 = lm(bwt ~ babysex + malform + mrace, data = birthweight_data)
broom::tidy(birthweight_mod1)
```

Resudual/Predictions Diagnostics 
```{r}
birthweight_data %>%
  modelr::add_predictions(birthweight_mod1 ) %>% 
  modelr::add_residuals(birthweight_mod1 ) %>% 
  ggplot(aes(x = pred, y = resid)) + geom_point()
```
There appear to be both outliers and residuals in the birthweight_data dataset. 

Model 2 
```{r}
birthweight_mod2 = lm(bwt ~ blength + gaweeks, data = birthweight_data)
broom::tidy(birthweight_mod1)
```
Model 3
```{r}
birthweight_mod3 = lm(bwt ~ bhead + blength + babysex + bhead*blength + bhead*babysex + blength*babysex, data = birthweight_data)
broom::tidy(birthweight_mod1)
```

Make this comparison in terms of the cross-validated prediction error; use crossv_mc and functions in purrr as appropriate.

```{r}
cv_dataframe = 
crossv_mc(birthweight_data, 100) %>%
  mutate(
    birthweight_mod1 = map(train, ~ lm(bwt ~ babysex + malform + mrace, data = birthweight_data)),
    birthweight_mod2 = map(train, ~ lm(bwt ~ blength + gaweeks, data = birthweight_data)),
    birthweight_mod3 = map (train, ~ lm(bwt ~ bhead + blength + babysex + bhead*blength + bhead*babysex + blength*babysex, data = birthweight_data))) %>%
  
  mutate(
    rmse_birthweight_mod1 = map2_dbl(birthweight_mod1, test, ~rmse(model = .x, data = .y)), 
    rmse_birthweight_mod2 = map2_dbl(birthweight_mod2, test, ~rmse(model = .x, data = .y)), 
    rmse_birthweight_mod3 = map2_dbl(birthweight_mod3, test, ~rmse(model = .x, data = .y)))

cv_dataframe %>% 
  select(starts_with("rmse")) %>% 
  pivot_longer(everything(), names_to = "model", values_to = "rmse", names_prefix = "rmse_") %>%
  ggplot(aes(x = model, y = rmse)) + geom_violin()
```


Based on the violin plot, it appears that birthweight_mod3 has the lowest rmse score, which indicates that it is the best model. 

## Problem 2 
For this problem, we’ll use the 2017 Central Park weather data that we’ve seen elsewhere. The code chunk below (adapted from the course website) will download these data.


```{r}
weather_df = 
  rnoaa::meteo_pull_monitors(
    c("USW00094728"),
    var = c("PRCP", "TMIN", "TMAX"), 
    date_min = "2017-01-01",
    date_max = "2017-12-31") %>%
  mutate(
    name = recode(id, USW00094728 = "CentralPark_NY"),
    tmin = tmin / 10,
    tmax = tmax / 10) %>%
  select(name, id, everything())
```
Function to generate bootstrap. 

```{r}
boot_sample = function(df) {
  sample_frac(df, replace = TRUE)
}
```

Function to generate 5000 bootstrap samples. 

```{r}
boot_straps = tibble(
    strap_number = 1:5000,
    strap_sample = rerun(5000, boot_sample(weather_df))
  )

boot_straps
```

Use 5000 bootstrap samples and, for each bootstrap sample, produce estimates of these two quantities. Plot the distribution of your estimates, and describe these in words. Using the 5000 bootstrap estimates, identify the 2.5% and 97.5% quantiles to provide a 95% confidence interval for r̂ 2 and log(β̂ 0∗β̂ 1). Note: broom::glance() is helpful for extracting r̂ 2 from a fitted regression, and broom::tidy() (with some additional wrangling) should help in computing log(β̂ 0∗β̂ 1).

Results for R Squared Values 
```{r}
r_squared_boot = boot_straps %>% 
  mutate(
    models = map(strap_sample, ~lm(tmax ~ tmin, data = .x)), 
    results = map(models, broom::glance)) %>% 
  select(-strap_sample, -models) %>% 
  unnest(results)
r_squared_boot
```


```{r}
r_squared_boot %>% 
ggplot(aes(x = r.squared)) + geom_density()
```
The distribution centers around 0.91, and is approximately normal. 


Calculate 95% Confidence Interval. 


```{r}
CI_rsquared = r_squared_boot %>% 
  summarize(
    ci_lower = quantile(r.squared, 0.025), 
    ci_upper = quantile(r.squared, 0.975))
```


The confidence interval for r-squared is (0.8941777- 0.9271884).

```{r}
r_squared_boot2 = boot_straps %>% 
  mutate(
    models = map(strap_sample, ~lm(tmax ~ tmin, data = .x)), 
    results = map(models, broom::tidy)) %>% 
  select(strap_sample, term, estimate) %>% 
  pivot_wider(names_from = term, values_from = estimate) %>% 
  mutate(logbeta = log(beta0*tmin)) 
  unnest(results)
r_squared_boot
```






